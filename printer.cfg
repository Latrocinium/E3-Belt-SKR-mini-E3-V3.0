# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. for Ender 3 Belt Kit To use as klipper config, printer.cfg 

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.
[include mainsail.cfg]

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC0
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.580
stealthchop_threshold: 999999

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 13.304

endstop_pin: ^PC1
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.580
stealthchop_threshold: 999999

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
#rotation_distance: 8
endstop_pin: ^PC2
position_endstop: 0.0
#position_max: 250
rotation_distance: 44.1875
position_min: -250
position_max: 1000000

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
stealthchop_threshold: 999999

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
microsteps: 16
rotation_distance: 10.05
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
control: pid
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 250
#############
max_extrude_only_distance: 100.0
max_extrude_cross_section: 2.0
pressure_advance: 0.50

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.650
stealthchop_threshold: 999999

[heater_bed]
heater_pin: PC9
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC4
control: pid
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

[heater_fan heatbreak_cooling_fan]
pin: PC7

[heater_fan controller_fan]
pin: PB15

[fan]
pin: PC6

[mcu]
serial: #Should be your results from ls /dev/serial/by-id/*

[printer]
kinematics: cartesian #corexy #cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

# See the sample-lcd.cfg file for definitions of common LCD displays.

# Override to support unlimited belt size
# (homing Z simply resets its virtual position to 0.0)
[homing_override]
axes: z
set_position_z: 0
gcode:
  {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}G28 X0 Y0{% endif %}
  {% if params.X is defined %}G28 X0{% endif %}
  {% if params.Y is defined %}G28 Y0{% endif %}
  G92 Z0

# Eject all printed parts from the belt
[gcode_macro BED_EJECT]
gcode:
  TURN_OFF_HEATERS
  G28 ; Re-home
  G1 X50 Y50 F6000 ; Move hotend out of the way of the belt
  G1 Z420 F4000 ; Unload belt
  G28 Z0 ; Re-home Z

#[virtual_sdcard]
# for gcode upload
#path: /tmp

[display_status]
# for display messages in status panel

[pause_resume]
# for pause/resume functionality. 
# Mainsail/fluidd needs gcode macros for `PAUSE`, `RESUME` and `CANCEL_PRINT` to make the buttons work.

#[gcode_macro PAUSE]
#rename_existing: BASE_PAUSE
#default_parameter_X: 100    #edit to your park position
#default_parameter_Y: 100    #edit to your park position
#default_parameter_E: 1      #edit to your retract length
#gcode:
#    SAVE_GCODE_STATE NAME=PAUSE_state
#    BASE_PAUSE
#    G91
#    G1 E-{E} F2100
#    G90
#    G1 X{X} Y{Y} F6000

#[gcode_macro RESUME]
#rename_existing: BASE_RESUME
#default_parameter_E: 1      #edit to your retract length
#gcode:
#    G91
#    G1 E{E} F2100
#    G90
#    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
#    BASE_RESUME

#[gcode_macro CANCEL_PRINT]
#rename_existing: BASE_CANCEL_PRINT
#gcode:
#    TURN_OFF_HEATERS
#    CLEAR_PAUSE
#    SDCARD_RESET_FILE
#    BASE_CANCEL_PRINT#

#[menu __main __octoprint]
#type: disabled

#[menu __main __control __eject]
#type: command
#enable: {not printer.idle_timeout.state == "Printing"}
#name: Bed Eject
#gcode:
#  BED_EJECT

# Enable SD file loop support
#[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
#[gcode_macro M808]
#gcode:
#    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
#    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
#    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}
#/dev/serial/by-id/usb-Klipper_stm32g0b1xx_250039000150414235363020-if00

# This file contains common pin mappings for the BIGTREETECH SKR mini
# E3 v3.0. To use this config, the firmware should be compiled for the
# STM32G0B1 with a "8KiB bootloader" and USB communication.

# The "make flash" command does not work on the SKR mini E3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR
# mini E3 with that SD card.

# See docs/Config_Reference.md for a description of parameters.
[include mainsail.cfg]

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC0
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.580
stealthchop_threshold: 999999

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 13.304

endstop_pin: ^PC1
position_endstop: 0
position_max: 235
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 0.580
stealthchop_threshold: 999999

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
#rotation_distance: 8
endstop_pin: ^PC2
position_endstop: 0.0
#position_max: 250
rotation_distance: 44.1875
position_min: -250
position_max: 1000000

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 0.580
stealthchop_threshold: 999999

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
microsteps: 16
rotation_distance: 10.05
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
control: pid
pid_Kp: 21.527
pid_Ki: 1.063
pid_Kd: 108.982
min_temp: 0
max_temp: 250
#############
max_extrude_only_distance: 100.0
max_extrude_cross_section: 2.0
pressure_advance: 0.50

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.650
stealthchop_threshold: 999999

[heater_bed]
heater_pin: PC9
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC4
control: pid
pid_Kp: 54.027
pid_Ki: 0.770
pid_Kd: 948.182
min_temp: 0
max_temp: 130

[heater_fan heatbreak_cooling_fan]
pin: PC7

[heater_fan controller_fan]
pin: PB15

[fan]
pin: PC6

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32g0b1xx_250039000150414235363020-if00

[printer]
kinematics: cartesian #corexy #cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

# See the sample-lcd.cfg file for definitions of common LCD displays.

# Override to support unlimited belt size
# (homing Z simply resets its virtual position to 0.0)
[homing_override]
axes: z
set_position_z: 0
gcode:
  {% if params.X is not defined and params.Y is not defined and params.Z is not defined %}G28 X0 Y0{% endif %}
  {% if params.X is defined %}G28 X0{% endif %}
  {% if params.Y is defined %}G28 Y0{% endif %}
  G92 Z0

# Eject all printed parts from the belt
[gcode_macro BED_EJECT]
gcode:
  TURN_OFF_HEATERS
  G28 ; Re-home
  G1 X50 Y50 F6000 ; Move hotend out of the way of the belt
  G1 Z420 F4000 ; Unload belt
  G28 Z0 ; Re-home Z

#[virtual_sdcard]
# for gcode upload
#path: /tmp

[display_status]
# for display messages in status panel

[pause_resume]
# for pause/resume functionality. 
# Mainsail/fluidd needs gcode macros for `PAUSE`, `RESUME` and `CANCEL_PRINT` to make the buttons work.

#[gcode_macro PAUSE]
#rename_existing: BASE_PAUSE
#default_parameter_X: 100    #edit to your park position
#default_parameter_Y: 100    #edit to your park position
#default_parameter_E: 1      #edit to your retract length
#gcode:
#    SAVE_GCODE_STATE NAME=PAUSE_state
#    BASE_PAUSE
#    G91
#    G1 E-{E} F2100
#    G90
#    G1 X{X} Y{Y} F6000

#[gcode_macro RESUME]
#rename_existing: BASE_RESUME
#default_parameter_E: 1      #edit to your retract length
#gcode:
#    G91
#    G1 E{E} F2100
#    G90
#    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
#    BASE_RESUME

#[gcode_macro CANCEL_PRINT]
#rename_existing: BASE_CANCEL_PRINT
#gcode:
#    TURN_OFF_HEATERS
#    CLEAR_PAUSE
#    SDCARD_RESET_FILE
#    BASE_CANCEL_PRINT#

#[menu __main __octoprint]
#type: disabled

#[menu __main __control __eject]
#type: command
#enable: {not printer.idle_timeout.state == "Printing"}
#name: Bed Eject
#gcode:
#  BED_EJECT

# Enable SD file loop support
#[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
#[gcode_macro M808]
#gcode:
#    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
#    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
#    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}
